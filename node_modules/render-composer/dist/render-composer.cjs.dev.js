'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var R3F = require('@react-three/fiber');
var React = require('react');
var useConst = require('@hmans/use-const');
var useMutableList = require('@hmans/use-mutable-list');
var PP = require('postprocessing');
var three = require('three');
var useNullableState = require('@hmans/use-nullable-state');
var _function = require('fp-ts/function');
var shaderComposer = require('shader-composer');
var shaderComposerPostprocessing = require('shader-composer-postprocessing');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var R3F__namespace = /*#__PURE__*/_interopNamespace(R3F);
var React__default = /*#__PURE__*/_interopDefault(React);
var PP__namespace = /*#__PURE__*/_interopNamespace(PP);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var _excluded$1 = ["strict", "children"];
var Canvas = function Canvas(_ref) {
  var _ref$strict = _ref.strict,
      strict = _ref$strict === void 0 ? false : _ref$strict,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded$1);

  return /*#__PURE__*/React__default["default"].createElement(R3F__namespace.Canvas, _extends({
    shadows: true,
    flat: true,
    gl: {
      powerPreference: "high-performance",
      alpha: false,
      depth: false,
      stencil: false,
      antialias: false
    },
    children: strict ? /*#__PURE__*/React__default["default"].createElement(React.StrictMode, null, children) : children
  }, props));
};

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var EffectComposerContext = /*#__PURE__*/React.createContext(null);
var EffectComposer = function EffectComposer(_ref) {
  var children = _ref.children,
      _ref$updatePriority = _ref.updatePriority,
      updatePriority = _ref$updatePriority === void 0 ? 1 : _ref$updatePriority;

  /* This list will contain all our render passes. */
  var passes = useMutableList.useMutableList();
  /* Fetch some R3F state we'll need. */

  var gl = R3F.useThree(function (s) {
    return s.gl;
  });
  var size = R3F.useThree(function (s) {
    return s.size;
  });
  /* Create the composer. */

  var composer = useConst.useConst(function () {
    return new PP.EffectComposer(gl, {
      frameBufferType: three.HalfFloatType
    });
  });
  /* Rebuild passes when the list changes */

  React.useLayoutEffect(function () {
    // console.log("Version of passes was bumped, updating composer")
    var _iterator = _createForOfIteratorHelper(passes.list),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var pass = _step.value;
        composer.addPass(pass);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return function () {
      composer.removeAllPasses();
    };
  }, [passes.version]);
  /* Resize composer on resolution change */

  React.useLayoutEffect(function () {
    composer.setSize(size.width, size.height);
  }, [size.width, size.height, composer]);
  /* Render! */

  R3F.useFrame(function effectComposerRender(_, dt) {
    composer.render(dt);
  }, updatePriority);
  return /*#__PURE__*/React__default["default"].createElement(EffectComposerContext.Provider, {
    value: passes
  }, children);
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var EffectPassContext = /*#__PURE__*/React.createContext(null);
var EffectPass = function EffectPass(_ref) {
  var children = _ref.children;
  var camera = R3F.useThree(function (s) {
    return s.camera;
  });
  /* Use a mutable list of effects */

  var effects = useMutableList.useMutableList();
  /* Recreate the effect pass every time the effects change */

  var pass = React.useMemo(function () {
    return _construct(PP__namespace.EffectPass, [camera].concat(_toConsumableArray(effects.list)));
  }, [camera, effects.version]);
  React.useEffect(function () {
    return function () {
      return pass.dispose();
    };
  }, [pass]);
  /* Register with effect composer */

  var _useContext = React.useContext(EffectComposerContext),
      useItem = _useContext.useItem;

  useItem(pass);
  return /*#__PURE__*/React__default["default"].createElement(EffectPassContext.Provider, {
    value: effects
  }, children);
};

var usePostProcessingEffect = function usePostProcessingEffect(ctor, props) {
  /* Create effect */
  var effect = React.useMemo(ctor, []);
  /* Update props on rerender */

  React.useLayoutEffect(function () {
    Object.assign(effect, props);
  }, [effect, props]);
  /* Handle resolution changes */

  var size = R3F.useThree(function (s) {
    return s.size;
  });
  React.useLayoutEffect(function () {
    effect.setSize(size.width, size.height);
  }, [effect, size.width, size.height]);
  /* Register with the effect pass */

  React.useContext(EffectPassContext).useItem(effect);
  return effect;
};

var _excluded = ["lightSource"];
var GodRaysEffect = function GodRaysEffect(_ref) {
  var lightSource = _ref.lightSource,
      props = _objectWithoutProperties(_ref, _excluded);

  var camera = R3F.useThree(function (s) {
    return s.camera;
  });
  usePostProcessingEffect(function () {
    return new PP__namespace.GodRaysEffect(camera, lightSource, props);
  }, _objectSpread2({
    lightSource: lightSource
  }, props));
  return null;
};

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var LensDirtEffect = function LensDirtEffect(props) {
  usePostProcessingEffect(function () {
    return new LensDirtEffectImpl(props);
  }, props);
  return null;
};
var LensDirtEffectImpl = /*#__PURE__*/function (_ShaderComposerEffect) {
  _inherits(LensDirtEffectImpl, _ShaderComposerEffect);

  var _super = _createSuper(LensDirtEffectImpl);

  function LensDirtEffectImpl(_ref) {
    var texture = _ref.texture,
        _ref$blendFunction = _ref.blendFunction,
        blendFunction = _ref$blendFunction === void 0 ? PP__namespace.BlendFunction.ADD : _ref$blendFunction,
        _ref$minLuminance = _ref.minLuminance,
        minLuminance = _ref$minLuminance === void 0 ? 0.1 : _ref$minLuminance,
        _ref$maxLuminance = _ref.maxLuminance,
        maxLuminance = _ref$maxLuminance === void 0 ? 0.3 : _ref$maxLuminance,
        _ref$strength = _ref.strength,
        strength = _ref$strength === void 0 ? 1 : _ref$strength;

    _classCallCheck(this, LensDirtEffectImpl);

    var u_texture = shaderComposer.UniformUnit("sampler2D", texture);
    return _super.call(this, {
      blendFunction: blendFunction,
      root: shaderComposerPostprocessing.PostProcessingEffectMaster({
        color: _function.pipe(shaderComposerPostprocessing.InputColor, function (v) {
          return shaderComposer.Luminance(v);
        }, function (v) {
          return shaderComposer.Smoothstep(minLuminance, maxLuminance, v);
        }, function (v) {
          return shaderComposer.Mul(v, strength);
        }, function (v) {
          return shaderComposer.Mul(shaderComposer.Texture2D(u_texture, shaderComposerPostprocessing.UV).color, v);
        })
      })
    });
  }

  return _createClass(LensDirtEffectImpl);
}(shaderComposerPostprocessing.ShaderComposerEffect);

var TiltShiftEffect = function TiltShiftEffect(props) {
  usePostProcessingEffect(function () {
    return new PP__namespace.TiltShiftEffect(props);
  }, props);
  return null;
};

var NoiseEffect = function NoiseEffect(_ref) {
  var _ref$blendFunction = _ref.blendFunction,
      blendFunction = _ref$blendFunction === void 0 ? PP__namespace.BlendFunction.NORMAL : _ref$blendFunction,
      premultiply = _ref.premultiply,
      _ref$opacity = _ref.opacity,
      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity;
  usePostProcessingEffect(function () {
    return new PP__namespace.NoiseEffect({
      blendFunction: blendFunction,
      premultiply: premultiply
    });
  }, {
    blendMode: new PP__namespace.BlendMode(blendFunction, opacity)
  });
  return null;
};

var SelectiveBloomEffect = function SelectiveBloomEffect(props) {
  var scene = R3F.useThree(function (s) {
    return s.scene;
  });
  var camera = R3F.useThree(function (s) {
    return s.camera;
  });
  var effect = usePostProcessingEffect(function () {
    return new PP__namespace.SelectiveBloomEffect(scene, camera, _objectSpread2({
      blendFunction: PP__namespace.BlendFunction.ADD,
      mipmapBlur: true,
      luminanceThreshold: 1,
      luminanceSmoothing: 0.2,
      intensity: 1
    }, props));
  }, props);
  React.useLayoutEffect(function () {
    effect.inverted = true;
  }, [effect]);
  return null;
};

var SMAAEffect = function SMAAEffect(props) {
  usePostProcessingEffect(function () {
    return new PP__namespace.SMAAEffect(props);
  }, props);
  return null;
};

var TextureEffect = function TextureEffect(props) {
  usePostProcessingEffect(function () {
    return new PP__namespace.TextureEffect(props);
  }, props);
  return null;
};

var VignetteEffect = function VignetteEffect(props) {
  usePostProcessingEffect(function () {
    return new PP__namespace.VignetteEffect(props);
  }, props);
  return null;
};

var bitmask = function bitmask() {
  for (var _len = arguments.length, groups = new Array(_len), _key = 0; _key < _len; _key++) {
    groups[_key] = arguments[_key];
  }

  return groups.reduce(function (acc, layer) {
    return acc | 1 << layer;
  }, 0);
};

var not = function not() {
  return ~bitmask.apply(void 0, arguments);
};

bitmask.not = not;

var CopyPass = /*#__PURE__*/React.forwardRef(function (_, ref) {
  var pass = React.useMemo(function () {
    return new PP__namespace.CopyPass();
  }, []);
  React.useContext(EffectComposerContext).useItem(pass);
  React.useImperativeHandle(ref, function () {
    return pass;
  });
  return null;
});

var DepthCopyPass = /*#__PURE__*/React.forwardRef(function (_, ref) {
  var pass = React.useMemo(function () {
    return new PP__namespace.DepthCopyPass({
      depthPacking: three.BasicDepthPacking
    });
  }, []);
  React.useImperativeHandle(ref, function () {
    return pass;
  });
  React.useContext(EffectComposerContext).useItem(pass);
  return null;
});

var LambdaPass = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var fun = _ref.fun;
  var pass = React.useMemo(function () {
    return new PP__namespace.LambdaPass(fun);
  }, []);
  React.useContext(EffectComposerContext).useItem(pass);
  React.useImperativeHandle(ref, function () {
    return pass;
  });
  return null;
});

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }

      return desc.value;
    };
  }

  return _get.apply(this, arguments);
}

var LayerRenderPass = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var scene = _ref.scene,
      camera = _ref.camera,
      layerMask = _ref.layerMask,
      _ref$ignoreBackground = _ref.ignoreBackground,
      ignoreBackground = _ref$ignoreBackground === void 0 ? false : _ref$ignoreBackground,
      _ref$clear = _ref.clear,
      clear = _ref$clear === void 0 ? false : _ref$clear;
  var pass = React.useMemo(function () {
    return new LayerRenderPassImpl(scene, camera, undefined, layerMask);
  }, [scene, camera]);
  React.useLayoutEffect(function () {
    pass.ignoreBackground = ignoreBackground;
    pass.clearPass.enabled = clear;
  });
  React.useContext(EffectComposerContext).useItem(pass);
  React.useImperativeHandle(ref, function () {
    return pass;
  });
  return null;
});
var LayerRenderPassImpl = /*#__PURE__*/function (_RenderPass) {
  _inherits(LayerRenderPassImpl, _RenderPass);

  var _super = _createSuper(LayerRenderPassImpl);

  function LayerRenderPassImpl(scene, camera, overrideMaterial) {
    var _this;

    var layerMask = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0xffffffff;

    _classCallCheck(this, LayerRenderPassImpl);

    _this = _super.call(this, scene, camera, overrideMaterial);
    _this.layerMask = layerMask;
    return _this;
  }

  _createClass(LayerRenderPassImpl, [{
    key: "render",
    value: function render(renderer, inputBuffer, outputBuffer, deltaTime, stencilTest) {
      var mask = this.camera.layers.mask;
      this.camera.layers.mask = this.layerMask;

      _get(_getPrototypeOf(LayerRenderPassImpl.prototype), "render", this).call(this, renderer, inputBuffer, outputBuffer, deltaTime, stencilTest);

      this.camera.layers.mask = mask;
    }
  }]);

  return LayerRenderPassImpl;
}(PP.RenderPass);

var RenderPass = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var camera = _ref.camera,
      scene = _ref.scene,
      _ref$ignoreBackground = _ref.ignoreBackground,
      ignoreBackground = _ref$ignoreBackground === void 0 ? false : _ref$ignoreBackground,
      _ref$clear = _ref.clear,
      clear = _ref$clear === void 0 ? false : _ref$clear,
      _ref$clearColor = _ref.clearColor,
      clearColor = _ref$clearColor === void 0 ? true : _ref$clearColor,
      _ref$clearDepth = _ref.clearDepth,
      clearDepth = _ref$clearDepth === void 0 ? true : _ref$clearDepth,
      _ref$clearStencil = _ref.clearStencil,
      clearStencil = _ref$clearStencil === void 0 ? true : _ref$clearStencil;
  var r3fCamera = R3F.useThree(function (state) {
    return state.camera;
  });
  var r3fScene = R3F.useThree(function (state) {
    return state.scene;
  });
  var pass = React.useMemo(function () {
    return new PP__namespace.RenderPass(scene || r3fScene, camera || r3fCamera);
  }, [scene, camera, r3fCamera, r3fScene]);
  React.useLayoutEffect(function () {
    pass.ignoreBackground = ignoreBackground;
    pass.clearPass.enabled = clear;
    pass.clearPass.setClearFlags(clearColor, clearDepth, clearStencil);
  });
  React.useImperativeHandle(ref, function () {
    return pass;
  });
  React.useContext(EffectComposerContext).useItem(pass);
  return null;
});

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var RenderPipelineContext = /*#__PURE__*/React.createContext(null);
var useRenderPipeline = function useRenderPipeline() {
  return React.useContext(RenderPipelineContext);
};
var Layers = {
  Default: 0,
  TransparentFX: 31
};
var RenderPipeline = function RenderPipeline(_ref) {
  var children = _ref.children,
      _ref$updatePriority = _ref.updatePriority,
      updatePriority = _ref$updatePriority === void 0 ? 1 : _ref$updatePriority;
  var camera = R3F.useThree(function (s) {
    return s.camera;
  });
  var scene = R3F.useThree(function (s) {
    return s.scene;
  });

  var _useNullableState = useNullableState.useNullableState(),
      _useNullableState2 = _slicedToArray(_useNullableState, 2),
      depthPass = _useNullableState2[0],
      setDepthPass = _useNullableState2[1];

  var _useNullableState3 = useNullableState.useNullableState(),
      _useNullableState4 = _slicedToArray(_useNullableState3, 2),
      colorPass = _useNullableState4[0],
      setColorPass = _useNullableState4[1];

  return /*#__PURE__*/React__default["default"].createElement(EffectComposer, {
    updatePriority: updatePriority
  }, /*#__PURE__*/React__default["default"].createElement(LayerRenderPass, {
    camera: camera,
    scene: scene,
    clear: true,
    layerMask: camera.layers.mask & bitmask.not(Layers.TransparentFX)
  }), /*#__PURE__*/React__default["default"].createElement(DepthCopyPass, {
    ref: setDepthPass
  }), /*#__PURE__*/React__default["default"].createElement(CopyPass, {
    ref: setColorPass
  }), /*#__PURE__*/React__default["default"].createElement(LayerRenderPass, {
    camera: camera,
    scene: scene,
    layerMask: bitmask(Layers.TransparentFX),
    ignoreBackground: true
  }), /*#__PURE__*/React__default["default"].createElement(EffectPass, null), depthPass && colorPass && /*#__PURE__*/React__default["default"].createElement(RenderPipelineContext.Provider, {
    value: {
      depth: depthPass.texture,
      color: colorPass.texture
    }
  }, children));
};

exports.Canvas = Canvas;
exports.CopyPass = CopyPass;
exports.DepthCopyPass = DepthCopyPass;
exports.EffectComposer = EffectComposer;
exports.EffectComposerContext = EffectComposerContext;
exports.EffectPass = EffectPass;
exports.EffectPassContext = EffectPassContext;
exports.GodRaysEffect = GodRaysEffect;
exports.LambdaPass = LambdaPass;
exports.LayerRenderPass = LayerRenderPass;
exports.LayerRenderPassImpl = LayerRenderPassImpl;
exports.Layers = Layers;
exports.LensDirtEffect = LensDirtEffect;
exports.LensDirtEffectImpl = LensDirtEffectImpl;
exports.NoiseEffect = NoiseEffect;
exports.RenderPass = RenderPass;
exports.RenderPipeline = RenderPipeline;
exports.SMAAEffect = SMAAEffect;
exports.SelectiveBloomEffect = SelectiveBloomEffect;
exports.TextureEffect = TextureEffect;
exports.TiltShiftEffect = TiltShiftEffect;
exports.VignetteEffect = VignetteEffect;
exports.bitmask = bitmask;
exports.usePostProcessingEffect = usePostProcessingEffect;
exports.useRenderPipeline = useRenderPipeline;
