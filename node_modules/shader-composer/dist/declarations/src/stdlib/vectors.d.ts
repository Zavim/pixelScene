import { Input, Unit } from "../units";
export declare const $orthogonal: (v: Input<"vec3">) => import("../expressions").Expression;
/**
 * Returns the normalized (unit length) version of a given vector.
 *
 * @param a The vec2/3/4 input value to normalize.
 * @returns A new Shader Unit containing the normalized value of `a`.
 */
export declare const Normalize: <T extends "vec2" | "vec3" | "vec4">(a: Input<T>) => Unit<T>;
export declare const Cross: (a: Input<"vec3">, b: Input<"vec3">) => Unit<"vec3">;
export declare const Dot: <T extends "vec2" | "vec3" | "vec4">(a: Input<T>, b: Input<T>) => import("../units").IUnit<"float">;
export declare const Tangent: (v: Input<"vec3">) => Unit<"vec3">;
export declare const Bitangent: (p: Input<"vec3">, t: Input<"vec3">) => Unit<"vec3">;
export declare const Distance: <T extends "float" | "vec2" | "vec3" | "vec4">(a: Input<T>, b: Input<T>) => import("../units").IUnit<"float">;
export declare const Length: <T extends "float" | "vec2" | "vec3" | "vec4">(a: Input<T>) => import("../units").IUnit<"float">;
export declare const Reflect: <T extends "float" | "vec2" | "vec3" | "vec4">(vector: Input<T>, normal: Input<T>) => Unit<T>;
export declare const Refract: <T extends "float" | "vec2" | "vec3" | "vec4">(vector: Input<T>, normal: Input<T>, eta: Input<"float">) => Unit<T>;
