import { Expression } from "../expressions";
import { GLSLType, Input, Unit, UnitConfig } from "../units";
/**
 * The `CastableInput<T>` type describes the inputs that can be cast to a
 * `Unit<T>`. This type is used by the `Vec2`, `Vec3`, `Float` etc. unit
 * constructors, who will automatically cast the given values to the correct
 * type.
 */
export declare type CastableInput<T extends GLSLType> = Input<GLSLType>;
export declare type CastFunction<T extends GLSLType> = (...values: CastableInput<T>[]) => Expression;
/**
 * Returns an expression that casts the given values to a `float`.
 */
export declare const $float: (...values: CastableInput<"float">[]) => Expression;
/**
 * Returns an expression that casts the given values to a `vec2`.
 */
export declare const $vec2: (...values: CastableInput<"vec2">[]) => Expression;
/**
 * Returns an expression that casts the given values to a `vec3`.
 */
export declare const $vec3: (...values: CastableInput<"vec3">[]) => Expression;
/**
 * Returns an expression that casts the given values to a `vec4`.
 */
export declare const $vec4: (...values: CastableInput<"vec4">[]) => Expression;
/**
 * Returns an expression that casts the given values to a `mat2`.
 */
export declare const $mat2: (...values: CastableInput<"mat2">[]) => Expression;
/**
 * Returns an expression that casts the given values to a `mat3`.
 */
export declare const $mat3: (...values: CastableInput<"mat3">[]) => Expression;
/**
 * Returns an expression that casts the given values to a `mat4`.
 */
export declare const $mat4: (...values: CastableInput<"mat4">[]) => Expression;
/**
 * Returns an expression that swizzles the given value with the provided
 * swizzling components.
 *
 * @param v The input value to swizzle.
 * @param swizzle The swizzling components to use.
 * @returns An expression that swizzles the given value with the provided swizzle string.
 */
export declare const $swizzle: (v: Input<any>, swizzle: string) => Expression;
export declare const unit: <T extends GLSLType>(i: Input<T>, config?: Partial<UnitConfig<T>> | undefined) => Unit<T>;
/**
 * Wraps an input value into a unit that is configured to use a varying.
 *
 * @param i Input value (unit, JS value or expression) to wrap in a varying unit.
 * @param config Optional extra configuration for the newly created unit.
 * @returns A new unit that wraps the given value and is configured to use a varying.
 */
export declare const varying: <T extends GLSLType>(i: Input<T>, config?: Partial<UnitConfig<T>> | undefined) => Unit<T>;
export declare const Float: (v: CastableInput<"float"> | CastableInput<"float">[], extras?: Partial<UnitConfig<"float">> | undefined) => import("../units").IUnit<"float">;
export declare const Int: (v: Input<"int">, extras?: Partial<UnitConfig<"int">> | undefined) => import("../units").IUnit<"int">;
export declare const Bool: (v: Input<"bool">, extras?: Partial<UnitConfig<"bool">> | undefined) => import("../units").IUnit<"bool">;
export declare const Vec2: (v: CastableInput<"vec2"> | CastableInput<"vec2">[], extras?: Partial<UnitConfig<"vec2">> | undefined) => Unit<"vec2">;
export declare const Vec3: (v: CastableInput<"vec3"> | CastableInput<"vec3">[], extras?: Partial<UnitConfig<"vec3">> | undefined) => Unit<"vec3">;
export declare const Vec4: (v: CastableInput<"vec4"> | CastableInput<"vec4">[], extras?: Partial<UnitConfig<"vec4">> | undefined) => Unit<"vec4">;
export declare const Mat2: (v: CastableInput<"mat2"> | CastableInput<"mat2">[], extras?: Partial<UnitConfig<"mat2">> | undefined) => import("../units").IUnit<"mat2">;
export declare const Mat3: (v: CastableInput<"mat3"> | CastableInput<"mat3">[], extras?: Partial<UnitConfig<"mat3">> | undefined) => import("../units").IUnit<"mat3">;
export declare const Mat4: (v: CastableInput<"mat4"> | CastableInput<"mat4">[], extras?: Partial<UnitConfig<"mat4">> | undefined) => import("../units").IUnit<"mat4">;
export declare const Master: (extras?: Partial<UnitConfig<"bool">>) => import("../units").IUnit<"bool">;
