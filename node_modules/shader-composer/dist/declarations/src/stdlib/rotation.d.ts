import { Input } from "../units";
/**
 * Generates a Shader Unit of type `mat4` representing a rotation around a specified
 * axis, by a specified amount/angle. This unit can then be multiplied with a
 * `vec3` unit in order to apply the rotation to that vector.
 *
 * @param axis Axis to rotate around.
 * @param angle The angle (amount) to rotate.
 * @returns A Shader Unit of type `mat4` representing the rotation matrix.
 */
export declare const Rotation3D: (axis: Input<"vec3">, angle: Input<"float">) => import("../units").IUnit<"mat4">;
export declare const Rotation3DX: (angle: Input<"float">) => import("../units").IUnit<"mat3">;
export declare const Rotation3DY: (angle: Input<"float">) => import("../units").IUnit<"mat3">;
export declare const Rotation3DZ: (angle: Input<"float">) => import("../units").IUnit<"mat3">;
/**
 * Rotate a vector around the specified axis.
 *
 * @param position Vector to rotate.
 * @param axis The axis to rotate around.
 * @param angle The angle (amount) to rotate around the axis.
 * @returns A `vec3` Shader Unit containing the rotated vector.
 */
export declare const Rotate3D: (position: Input<"vec3">, axis: Input<"vec3">, angle: Input<"float">) => import("../units").Unit<"vec3">;
export declare const RotateX: (position: Input<"vec3">, angle: Input<"float">) => import("../units").Unit<"vec3">;
export declare const RotateY: (position: Input<"vec3">, angle: Input<"float">) => import("../units").Unit<"vec3">;
export declare const RotateZ: (position: Input<"vec3">, angle: Input<"float">) => import("../units").Unit<"vec3">;
