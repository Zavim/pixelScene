import { GLSLType, Input, Unit } from "../units";
export declare type FresnelProps = {
    normal?: Input<"vec3">;
    alpha?: Input<"float">;
    bias?: Input<"float">;
    intensity?: Input<"float">;
    power?: Input<"float">;
    factor?: Input<"float">;
};
/**
 * A Shader Unit that calculates the fresnel effect.
 *
 * @param param0.normal The normal of the surface. Defaults to {@link VertexNormal}.
 * @param param0.alpha The alpha value of the fresnel effect. Defaults to 1.
 * @param param0.bias The bias of the fresnel effect. Defaults to 0.
 * @param param0.intensity The intensity of the fresnel effect. Defaults to 1.
 * @param param0.power The power of the fresnel effect. Defaults to 1.
 * @returns A shader unit holding the fresnel value.
 */
export declare const Fresnel: ({ normal, bias, intensity, power, factor }?: FresnelProps) => import("../units").IUnit<"float">;
export declare type GradientStops<T extends GLSLType = "vec3"> = GradientStop<T>[];
export declare type GradientStop<T extends GLSLType = "vec3"> = [
    Input<T>,
    Input<"float">
];
/**
 * A Shader Unit that returns the value of a gradient at a specified position.
 *
 * @param f The position within the gradient.
 * @param stops A configuration of value stops making up the gradient. See {@link GradientStops}.
 * @returns A shader unit holding the gradient value at the specified position.
 */
export declare const Gradient: <T extends GLSLType = "vec3">(f: Input<"float">, ...stops: GradientStops<T>) => Unit<T>;
export declare const Luminance: (color: Input<"vec3">) => import("../units").IUnit<"float">;
