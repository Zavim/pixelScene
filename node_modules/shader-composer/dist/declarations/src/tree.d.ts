import { Expression } from "./expressions";
import { Snippet } from "./snippets";
import { Input, Program } from "./units";
export declare type Item = Input | Snippet | Expression;
/**
 * Given a root unit, iterate over the tree and invoke the given callback for each
 * item encountered. Items include units, expressions, snippets, and any constant
 * values.
 *
 * @param item The root of the tree to traverse.
 * @param callback The callback to execute for each item.
 */
export declare const walkTree: (item: Item, program: Program | "any", callback: (item: Item) => void, seen?: Set<any>) => void;
/**
 * Walks the tree and returns all items found where the given callback function
 * returns true.
 */
export declare const collectFromTree: (root: Item, program: Program | "any", check?: ((item: Item) => boolean) | undefined) => any[];
/**
 * Given a unit, expression o snippet, returns that item's dependencies.
 *
 * @param item
 * @returns
 */
export declare const getDependencies: (item: Item, program: Program | "any") => Item[];
