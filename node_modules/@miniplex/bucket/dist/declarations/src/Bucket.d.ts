import { Event } from "@hmans/event";
/**
 * A class wrapping an array of entities of a specific type, providing
 * performance-optimized methods for adding and removing entities, and events
 * for when entities are added or removed.
 */
export declare class Bucket<E> {
    entities: E[];
    [Symbol.iterator](): {
        next: () => {
            value: E;
            done: boolean;
        };
    };
    constructor(entities?: E[]);
    /**
     * Fired when an entity has been added to the bucket.
     */
    onEntityAdded: Event<E>;
    /**
     * Fired when an entity is about to be removed from the bucket.
     */
    onEntityRemoved: Event<E>;
    private entityPositions;
    get size(): number;
    has(entity: any): entity is E;
    add<D extends E>(entity: D): D & E;
    remove(entity: E): E;
    clear(): void;
}
