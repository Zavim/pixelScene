import { Event } from '@hmans/event';

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

var _Symbol$iterator;

/**
 * A class wrapping an array of entities of a specific type, providing
 * performance-optimized methods for adding and removing entities, and events
 * for when entities are added or removed.
 */
_Symbol$iterator = Symbol.iterator;
var Bucket = /*#__PURE__*/function () {
  function Bucket() {
    var entities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    _classCallCheck(this, Bucket);
    _defineProperty(this, "onEntityAdded", new Event());
    _defineProperty(this, "onEntityRemoved", new Event());
    _defineProperty(this, "entityPositions", new Map());
    this.entities = entities;
    this.add = this.add.bind(this);
    this.remove = this.remove.bind(this);

    /* Register all entity positions */
    for (var i = 0; i < entities.length; i++) {
      this.entityPositions.set(entities[i], i);
    }
  }

  /**
   * Fired when an entity has been added to the bucket.
   */
  _createClass(Bucket, [{
    key: _Symbol$iterator,
    value: /* Custom iterator that iterates over all entities in reverse order. */
    function value() {
      var _this = this;
      var index = this.entities.length;
      return {
        next: function next() {
          var value = _this.entities[--index];
          return {
            value: value,
            done: index < 0
          };
        }
      };
    }
  }, {
    key: "size",
    get: function get() {
      return this.entities.length;
    }
  }, {
    key: "has",
    value: function has(entity) {
      return this.entityPositions.has(entity);
    }
  }, {
    key: "add",
    value: function add(entity) {
      if (entity && !this.has(entity)) {
        this.entities.push(entity);
        this.entityPositions.set(entity, this.entities.length - 1);

        /* Emit our own onEntityAdded event */
        this.onEntityAdded.emit(entity);
      }
      return entity;
    }
  }, {
    key: "remove",
    value: function remove(entity) {
      if (this.has(entity)) {
        /* Emit our own onEntityRemoved event. */
        this.onEntityRemoved.emit(entity);

        /* Get the entity's current position. */
        var index = this.entityPositions.get(entity);
        this.entityPositions["delete"](entity);

        /* Perform shuffle-pop if there is more than one entity. */
        var other = this.entities[this.entities.length - 1];
        if (other !== entity) {
          this.entities[index] = other;
          this.entityPositions.set(other, index);
        }

        /* Remove the entity from the entities array. */
        this.entities.pop();
      }
      return entity;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _iterator = _createForOfIteratorHelper(this),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var entity = _step.value;
          this.remove(entity);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
  return Bucket;
}();

export { Bucket };
