import { Bucket, With, World } from "@miniplex/core";
import React, { ReactNode } from "react";
export declare type EntityChildren<E> = ReactNode | ((entity: E) => ReactNode);
declare type CommonProps<E> = {
    children?: EntityChildren<E>;
};
export declare const createReactAPI: <E extends {}>(world: World<E>) => {
    world: World<E>;
    Component: <P extends keyof E>(props: {
        name: P;
        data?: E[P] | undefined;
        children?: ReactNode;
    }) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
    Entity: <D extends E>({ children: givenChildren, entity }: CommonProps<D> & {
        entity?: D | undefined;
    }) => JSX.Element;
    Archetype: <P_1 extends keyof E>({ with: _with, without, ...props }: CommonProps<With<E, P_1>> & {
        with?: P_1 | P_1[] | undefined;
        without?: keyof E | (keyof E)[] | undefined;
    }) => JSX.Element;
    Entities: <D_1 extends E>({ in: source, ...props }: CommonProps<D_1> & {
        in: Bucket<D_1> | D_1[];
    }) => JSX.Element;
    useCurrentEntity: () => E | null;
};
export {};
