import { Bucket } from '@miniplex/core';
import React, { useLayoutEffect, useEffect, useContext, memo, useMemo, useRef, createContext } from 'react';
import { useRerender } from '@hmans/use-rerender';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

/* https://medium.com/@alexandereardon/uselayouteffect-and-ssr-192986cdcf7a */
var useIsomorphicLayoutEffect$1 = typeof window !== "undefined" ? useLayoutEffect : useEffect;
var useIsomorphicLayoutEffect$2 = useIsomorphicLayoutEffect$1;

function useEntities(bucket) {
  var rerender = useRerender();
  useIsomorphicLayoutEffect$2(function () {
    bucket.onEntityAdded.add(rerender);
    bucket.onEntityRemoved.add(rerender);
    return function () {
      bucket.onEntityAdded.remove(rerender);
      bucket.onEntityRemoved.remove(rerender);
    };
  }, [rerender]);
  useIsomorphicLayoutEffect$2(rerender, []);
  return bucket;
}
function useOnEntityAdded(bucket, callback) {
  useIsomorphicLayoutEffect$2(function () {
    return bucket.onEntityAdded.add(callback);
  }, [bucket, callback]);
}
function useOnEntityRemoved(bucket, callback) {
  useIsomorphicLayoutEffect$2(function () {
    return bucket.onEntityRemoved.add(callback);
  }, [bucket, callback]);
}

var mergeRefs = function mergeRefs(refs) {
  return function (v) {
    refs.forEach(function (ref) {
      if (typeof ref === "function") ref(v);else if (!!ref) ref.current = v;
    });
  };
};

var _excluded = ["entities"],
  _excluded2 = ["bucket"],
  _excluded3 = ["in"],
  _excluded4 = ["with", "without"];
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? useLayoutEffect : useEffect;
var createReactAPI = function createReactAPI(world) {
  var EntityContext = /*#__PURE__*/createContext(null);
  var useCurrentEntity = function useCurrentEntity() {
    return useContext(EntityContext);
  };
  var RawEntity = function RawEntity(_ref) {
    var givenChildren = _ref.children,
      _ref$entity = _ref.entity,
      entity = _ref$entity === void 0 ? {} : _ref$entity;
    /* Add the entity to the bucket represented by this component if it isn't already part of it. */
    useIsomorphicLayoutEffect(function () {
      if (world.has(entity)) return;
      world.add(entity);
      return function () {
        world.remove(entity);
      };
    }, [world, entity]);
    var children = typeof givenChildren === "function" ? givenChildren(entity) : givenChildren;
    return /*#__PURE__*/React.createElement(EntityContext.Provider, {
      value: entity
    }, children);
  };
  var Entity = /*#__PURE__*/memo(RawEntity);
  var EntitiesInList = function EntitiesInList(_ref2) {
    var entities = _ref2.entities,
      props = _objectWithoutProperties(_ref2, _excluded);
    return /*#__PURE__*/React.createElement(React.Fragment, null, entities.map(function (entity) {
      return /*#__PURE__*/React.createElement(Entity, _extends({
        key: world.id(entity),
        entity: entity
      }, props));
    }));
  };
  var RawEntitiesInBucket = function RawEntitiesInBucket(_ref3) {
    var bucket = _ref3.bucket,
      props = _objectWithoutProperties(_ref3, _excluded2);
    return /*#__PURE__*/React.createElement(EntitiesInList, _extends({
      entities: useEntities(bucket).entities
    }, props));
  };
  var EntitiesInBucket = /*#__PURE__*/memo(RawEntitiesInBucket);
  function Entities(_ref4) {
    var source = _ref4["in"],
      props = _objectWithoutProperties(_ref4, _excluded3);
    if (source instanceof Bucket) {
      return /*#__PURE__*/React.createElement(EntitiesInBucket, _extends({
        bucket: source
      }, props));
    } else {
      return /*#__PURE__*/React.createElement(EntitiesInList, _extends({
        entities: source
      }, props));
    }
  }
  function Archetype(_ref5) {
    var _with = _ref5["with"],
      without = _ref5.without,
      props = _objectWithoutProperties(_ref5, _excluded4);
    var query = useMemo(function () {
      return {
        "with": _with ? Array.isArray(_with) ? _with : [_with] : undefined,
        without: without ? Array.isArray(without) ? without : [without] : undefined
      };
    }, [_with, without]);
    var bucket = useMemo(function () {
      return world.archetype(query);
    }, [world, query]);
    return /*#__PURE__*/React.createElement(EntitiesInBucket, _extends({}, props, {
      bucket: bucket
    }));
  }
  var Component = function Component(props) {
    var entity = useContext(EntityContext);
    var ref = useRef(null);
    if (!entity) {
      throw new Error("<Component> must be a child of <Entity>");
    }

    /* Handle creation and removal of component with a value prop */
    useIsomorphicLayoutEffect(function () {
      world.addComponent(entity, props.name, props.data || ref.current);
      return function () {
        return world.removeComponent(entity, props.name);
      };
    }, [entity, props.name]);

    /* Handle updates to existing component */
    useIsomorphicLayoutEffect(function () {
      if (props.data === undefined) return;
      entity[props.name] = props.data || ref.current;
    }, [entity, props.name, props.data, ref.current]);

    /* Handle setting of child value */
    if (props.children) {
      var child = React.Children.only(props.children);
      return /*#__PURE__*/React.cloneElement(child, {
        ref: mergeRefs([child.ref, ref])
      });
    }
    return null;
  };
  return {
    world: world,
    Component: Component,
    Entity: Entity,
    Archetype: Archetype,
    Entities: Entities,
    useCurrentEntity: useCurrentEntity
  };
};

export { createReactAPI, createReactAPI as default, useEntities, useOnEntityAdded, useOnEntityRemoved };
