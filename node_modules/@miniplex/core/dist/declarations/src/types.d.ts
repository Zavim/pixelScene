export declare type Predicate<E, D extends E> = ((v: E) => v is D) | ((entity: E) => boolean);
export declare type ArchetypeWithQuery<E, P extends keyof E> = {
    with: P[];
};
export declare type ArchetypeWithoutQuery<E, P extends keyof E = keyof E> = {
    without: P[];
};
export declare type ArchetypeQuery<E, P extends keyof E> = Partial<ArchetypeWithQuery<E, P> & ArchetypeWithoutQuery<E>>;
/**
 * A utility type that marks the specified properties as required.
 */
export declare type With<E, P extends keyof E> = E & Required<Pick<E, P>>;
/**
 * A utility type that removes all optional properties.
 */
export declare type Strictly<T> = WithoutOptional<T>;
declare type OptionalKeys<T> = {
    [K in keyof T]-?: undefined extends T[K] ? K : never;
};
declare type WithoutOptional<T> = Pick<T, Exclude<keyof T, OptionalKeys<T>[keyof T]>>;
export {};
