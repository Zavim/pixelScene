'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var shaderComposer = require('shader-composer');
var PP = require('postprocessing');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var PP__namespace = /*#__PURE__*/_interopNamespace(PP);

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

var _templateObject$1, _templateObject2, _templateObject3;
var InputColor = shaderComposer.Vec3(shaderComposer.$(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["inputColor.rgb"]))));
var InputAlpha = shaderComposer.Float(shaderComposer.$(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["inputColor.a"]))));
var UV = shaderComposer.Vec2(shaderComposer.$(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["uv"]))));

var _templateObject;
var PostProcessingEffectMaster = function PostProcessingEffectMaster(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? InputColor : _ref$color,
      _ref$alpha = _ref.alpha,
      alpha = _ref$alpha === void 0 ? InputAlpha : _ref$alpha;
  return shaderComposer.Master({
    fragment: {
      body: shaderComposer.$(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        outputColor = vec4(", ".rgb, ", ");\n      "])), color, alpha)
    }
  });
};

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }

      return desc.value;
    };
  }

  return _get.apply(this, arguments);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var ShaderComposerEffect = /*#__PURE__*/function (_PP$Effect) {
  _inherits(ShaderComposerEffect, _PP$Effect);

  var _super = _createSuper(ShaderComposerEffect);

  function ShaderComposerEffect(_ref) {
    var _this;

    var root = _ref.root,
        _ref$blendFunction = _ref.blendFunction,
        blendFunction = _ref$blendFunction === void 0 ? PP__namespace.BlendFunction.NORMAL : _ref$blendFunction;

    _classCallCheck(this, ShaderComposerEffect);

    var _compileShader = shaderComposer.compileShader(root),
        _compileShader2 = _slicedToArray(_compileShader, 2),
        shader = _compileShader2[0],
        meta = _compileShader2[1];
    /* TODO: replace this hack with something nicer. Maybe we can teach `compileShader` the signature of the function it should emit? */


    var fragment = shader.fragmentShader.replace("void main()", "void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor)");
    _this = _super.call(this, "LensDirt", fragment, {
      blendFunction: blendFunction,
      uniforms: new Map(Object.entries(shader.uniforms))
    });
    _this._shaderMeta = meta;
    return _this;
  }

  _createClass(ShaderComposerEffect, [{
    key: "update",
    value: function update(renderer, inputBuffer, deltaTime) {
      _get(_getPrototypeOf(ShaderComposerEffect.prototype), "update", this).call(this, renderer, inputBuffer, deltaTime); // TODO: decide what to do with camera and scene. Do we really need it?


      this._shaderMeta.update(deltaTime, undefined, undefined, renderer);
    }
  }]);

  return ShaderComposerEffect;
}(PP__namespace.Effect);

exports.InputAlpha = InputAlpha;
exports.InputColor = InputColor;
exports.PostProcessingEffectMaster = PostProcessingEffectMaster;
exports.ShaderComposerEffect = ShaderComposerEffect;
exports.UV = UV;
