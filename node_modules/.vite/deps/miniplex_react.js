import {
  Bucket
} from "./chunk-O5CPHMQJ.js";
import {
  require_react
} from "./chunk-YN3MIK7E.js";
import {
  __toESM
} from "./chunk-4EOJPDL2.js";

// node_modules/@miniplex/react/dist/miniplex-react.esm.js
var import_react2 = __toESM(require_react());

// node_modules/@hmans/use-version/dist/hmans-use-version.esm.js
var import_react = __toESM(require_react());
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var useVersion = function useVersion2() {
  var _useState = (0, import_react.useState)(0), _useState2 = _slicedToArray(_useState, 2), version = _useState2[0], setVersion = _useState2[1];
  return [version, function() {
    return setVersion(function(v) {
      return v + 1;
    });
  }];
};

// node_modules/@hmans/use-rerender/dist/hmans-use-rerender.esm.js
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
var useRerender = function useRerender2() {
  var _useVersion = useVersion(), _useVersion2 = _slicedToArray2(_useVersion, 2);
  _useVersion2[0];
  var bump = _useVersion2[1];
  return bump;
};

// node_modules/@miniplex/react/dist/miniplex-react.esm.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var useIsomorphicLayoutEffect$1 = typeof window !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;
var useIsomorphicLayoutEffect$2 = useIsomorphicLayoutEffect$1;
function useEntities(bucket) {
  var rerender = useRerender();
  useIsomorphicLayoutEffect$2(function() {
    bucket.onEntityAdded.add(rerender);
    bucket.onEntityRemoved.add(rerender);
    return function() {
      bucket.onEntityAdded.remove(rerender);
      bucket.onEntityRemoved.remove(rerender);
    };
  }, [rerender]);
  useIsomorphicLayoutEffect$2(rerender, []);
  return bucket;
}
function useOnEntityAdded(bucket, callback) {
  useIsomorphicLayoutEffect$2(function() {
    return bucket.onEntityAdded.add(callback);
  }, [bucket, callback]);
}
function useOnEntityRemoved(bucket, callback) {
  useIsomorphicLayoutEffect$2(function() {
    return bucket.onEntityRemoved.add(callback);
  }, [bucket, callback]);
}
var mergeRefs = function mergeRefs2(refs) {
  return function(v) {
    refs.forEach(function(ref) {
      if (typeof ref === "function")
        ref(v);
      else if (!!ref)
        ref.current = v;
    });
  };
};
var _excluded = ["entities"];
var _excluded2 = ["bucket"];
var _excluded3 = ["in"];
var _excluded4 = ["with", "without"];
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;
var createReactAPI = function createReactAPI2(world) {
  var EntityContext = (0, import_react2.createContext)(null);
  var useCurrentEntity = function useCurrentEntity2() {
    return (0, import_react2.useContext)(EntityContext);
  };
  var RawEntity = function RawEntity2(_ref) {
    var givenChildren = _ref.children, _ref$entity = _ref.entity, entity = _ref$entity === void 0 ? {} : _ref$entity;
    useIsomorphicLayoutEffect(function() {
      if (world.has(entity))
        return;
      world.add(entity);
      return function() {
        world.remove(entity);
      };
    }, [world, entity]);
    var children = typeof givenChildren === "function" ? givenChildren(entity) : givenChildren;
    return import_react2.default.createElement(EntityContext.Provider, {
      value: entity
    }, children);
  };
  var Entity = (0, import_react2.memo)(RawEntity);
  var EntitiesInList = function EntitiesInList2(_ref2) {
    var entities = _ref2.entities, props = _objectWithoutProperties(_ref2, _excluded);
    return import_react2.default.createElement(import_react2.default.Fragment, null, entities.map(function(entity) {
      return import_react2.default.createElement(Entity, _extends({
        key: world.id(entity),
        entity
      }, props));
    }));
  };
  var RawEntitiesInBucket = function RawEntitiesInBucket2(_ref3) {
    var bucket = _ref3.bucket, props = _objectWithoutProperties(_ref3, _excluded2);
    return import_react2.default.createElement(EntitiesInList, _extends({
      entities: useEntities(bucket).entities
    }, props));
  };
  var EntitiesInBucket = (0, import_react2.memo)(RawEntitiesInBucket);
  function Entities(_ref4) {
    var source = _ref4["in"], props = _objectWithoutProperties(_ref4, _excluded3);
    if (source instanceof Bucket) {
      return import_react2.default.createElement(EntitiesInBucket, _extends({
        bucket: source
      }, props));
    } else {
      return import_react2.default.createElement(EntitiesInList, _extends({
        entities: source
      }, props));
    }
  }
  function Archetype(_ref5) {
    var _with = _ref5["with"], without = _ref5.without, props = _objectWithoutProperties(_ref5, _excluded4);
    var query = (0, import_react2.useMemo)(function() {
      return {
        "with": _with ? Array.isArray(_with) ? _with : [_with] : void 0,
        without: without ? Array.isArray(without) ? without : [without] : void 0
      };
    }, [_with, without]);
    var bucket = (0, import_react2.useMemo)(function() {
      return world.archetype(query);
    }, [world, query]);
    return import_react2.default.createElement(EntitiesInBucket, _extends({}, props, {
      bucket
    }));
  }
  var Component = function Component2(props) {
    var entity = (0, import_react2.useContext)(EntityContext);
    var ref = (0, import_react2.useRef)(null);
    if (!entity) {
      throw new Error("<Component> must be a child of <Entity>");
    }
    useIsomorphicLayoutEffect(function() {
      world.addComponent(entity, props.name, props.data || ref.current);
      return function() {
        return world.removeComponent(entity, props.name);
      };
    }, [entity, props.name]);
    useIsomorphicLayoutEffect(function() {
      if (props.data === void 0)
        return;
      entity[props.name] = props.data || ref.current;
    }, [entity, props.name, props.data, ref.current]);
    if (props.children) {
      var child = import_react2.default.Children.only(props.children);
      return import_react2.default.cloneElement(child, {
        ref: mergeRefs([child.ref, ref])
      });
    }
    return null;
  };
  return {
    world,
    Component,
    Entity,
    Archetype,
    Entities,
    useCurrentEntity
  };
};
export {
  createReactAPI,
  createReactAPI as default,
  useEntities,
  useOnEntityAdded,
  useOnEntityRemoved
};
//# sourceMappingURL=miniplex_react.js.map
